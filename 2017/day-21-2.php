<?php

ini_set('memory_limit' , -1);

$input = '../.# => ##./#../...
.#./..#/### => #..#/..../..../#..#';

$input = '../.. => ..#/.#./...
#./.. => .../#../.##
##/.. => .##/###/##.
.#/#. => #.#/..#/#.#
##/#. => .../.##/...
##/## => ##./..#/..#
.../.../... => ##../..../##../.###
#../.../... => ...#/.#.#/.#../.#.#
.#./.../... => #.#./...#/#.#./.##.
##./.../... => ..#./#.##/#.../.###
#.#/.../... => ##../##.#/..#./#.##
###/.../... => ..../.#.#/.###/#..#
.#./#../... => #..#/#.../.##./....
##./#../... => #.##/..##/####/.###
..#/#../... => ..#./#.##/####/####
#.#/#../... => .##./#.##/#.#./##.#
.##/#../... => #.##/####/.###/...#
###/#../... => ..../#.#./##.#/..##
.../.#./... => .###/.##./##../.##.
#../.#./... => ..../#.##/...#/#.#.
.#./.#./... => ...#/####/.##./#...
##./.#./... => .###/#.##/###./....
#.#/.#./... => #.##/###./..../..#.
###/.#./... => .#../#.#./#.##/#.##
.#./##./... => .###/##../..##/#..#
##./##./... => ..#./#.#./.#.#/##.#
..#/##./... => .#../####/...#/..##
#.#/##./... => ..../##.#/.##./....
.##/##./... => .#.#/.#.#/.##./####
###/##./... => ##.#/..../..../....
.../#.#/... => ..##/##../##.#/###.
#../#.#/... => ####/#.##/#.../###.
.#./#.#/... => ..../#..#/..##/.#..
##./#.#/... => #.../..##/##../..#.
#.#/#.#/... => ...#/#.#./#.#./#...
###/#.#/... => ###./###./##.#/###.
.../###/... => ..#./###./##.#/####
#../###/... => ##.#/..#./##../..##
.#./###/... => #.../#.##/##../....
##./###/... => ..##/.#.#/#..#/#.##
#.#/###/... => #.##/..#./.#../..##
###/###/... => ..#./#..#/####/.##.
..#/.../#.. => ##.#/#.##/...#/###.
#.#/.../#.. => #..#/..#./##../###.
.##/.../#.. => ..#./.#../###./#.#.
###/.../#.. => ...#/...#/.#.#/.##.
.##/#../#.. => ##../#.#./#..#/##..
###/#../#.. => ##../.#.#/##../#..#
..#/.#./#.. => ##.#/##.#/...#/.#..
#.#/.#./#.. => .###/.#.#/###./....
.##/.#./#.. => #..#/###./####/..#.
###/.#./#.. => ..#./.###/.###/...#
.##/##./#.. => #.##/..##/...#/.###
###/##./#.. => ####/##.#/#.##/#..#
#../..#/#.. => ..../.##./#.##/#...
.#./..#/#.. => #..#/##../...#/#...
##./..#/#.. => ..#./.###/..##/.#.#
#.#/..#/#.. => .##./..##/..#./#..#
.##/..#/#.. => ####/.#.#/#.../.#.#
###/..#/#.. => ..../..##/#.##/###.
#../#.#/#.. => #.##/.#.#/.#../.##.
.#./#.#/#.. => ..##/###./.###/###.
##./#.#/#.. => ##.#/##.#/#.#./##..
..#/#.#/#.. => ###./###./.#.#/.#..
#.#/#.#/#.. => ##../..#./##../....
.##/#.#/#.. => .###/#.#./##.#/##..
###/#.#/#.. => ##.#/#.#./.#.#/#...
#../.##/#.. => .#.#/...#/.#.#/..#.
.#./.##/#.. => ###./##../##.#/....
##./.##/#.. => ..##/###./#.#./#.#.
#.#/.##/#.. => ##.#/..##/#..#/####
.##/.##/#.. => ..../####/..#./##..
###/.##/#.. => .###/#..#/..../.#..
#../###/#.. => #..#/.#../.#.#/#...
.#./###/#.. => .#../..../.##./.###
##./###/#.. => ##.#/.#../.#.#/#..#
..#/###/#.. => #.##/##../..##/#...
#.#/###/#.. => ####/..##/.#../##.#
.##/###/#.. => .###/#..#/.###/#.##
###/###/#.. => ..##/.##./##../#..#
.#./#.#/.#. => ..##/.##./.##./.###
##./#.#/.#. => ..##/...#/.##./####
#.#/#.#/.#. => .###/.###/#.#./.#..
###/#.#/.#. => ##.#/###./##.#/####
.#./###/.#. => ...#/..#./.#.#/.#..
##./###/.#. => ###./##.#/#.../#.#.
#.#/###/.#. => .##./#.#./...#/..#.
###/###/.#. => .#.#/.#../..##/####
#.#/..#/##. => .##./...#/#..#/.###
###/..#/##. => #.##/.#.#/...#/..##
.##/#.#/##. => ###./.###/...#/....
###/#.#/##. => .##./.##./#.#./#...
#.#/.##/##. => #.#./.##./.#.#/.###
###/.##/##. => ..../####/.#.#/#.##
.##/###/##. => .##./.###/###./.#..
###/###/##. => #.../###./.##./##.#
#.#/.../#.# => #.#./..../#.##/###.
###/.../#.# => .#../.#.#/#.../.###
###/#../#.# => ###./#..#/####/##..
#.#/.#./#.# => ###./##.#/..../.#..
###/.#./#.# => ####/.#.#/.#../..##
###/##./#.# => #.#./####/..##/#...
#.#/#.#/#.# => #.#./#.#./#.../#.##
###/#.#/#.# => #.##/.#../..#./.##.
#.#/###/#.# => .###/..##/####/#..#
###/###/#.# => #.../..#./..#./#.##
###/#.#/### => .#.#/.###/#.##/..##
###/###/### => #.#./...#/.#../.#.#';

$pattern = '.#./..#/###';

$grid = [];
$rules = [];

function flatten(array $in) : string {
    $out = '';

    foreach ($in as $row) {
        $out .= implode('', $row) . '/';
    }

    return substr($out, 0, -1);
}

function parse(string $in) {
    $out = [];

    foreach (explode('/', $in) as $line) {
        $out[] = str_split($line);
    }

    return $out;
}

function parseRule(string $rule) {
    $sides = [];
    foreach (explode(' => ', $rule) as $side) {
        $sides[] = parse($side);
    }

    $in = $sides[0];
    $out = $sides[1];

    return ['in' => $in, 'out' => $out];
}

function pretty($in) {
    return str_replace('/', "\n", $in);
}

function flip(array $in) {
    $out = [];

    for ($row = 0, $rowCount = count($in); $row < $rowCount; $row++) {
        for ($col = 0, $colCount = count($in[$row]); $col < $colCount; $col++) {
            $out[$row][$colCount - 1 - $col] = $in[$row][$col];
        }
        ksort($out[$row]);
    }

    return $out;
}

function rotate(array $in) {
    $out = [];

    for ($row = 0, $rowCount = count($in); $row < $rowCount; $row++) {
        for ($col = 0, $colCount = count($in[$row]); $col < $colCount; $col++) {
            $out[$colCount - 1 - $col][$row] = $in[$row][$col];
        }
    }

    ksort($out);

    return $out;
}

function divide(array $in, int $size) {
    if (count($in) === $size) {
        return [$in];
    }

    $parts = [];

    $flatIn = flatten($in);

    $lines = explode("/", $flatIn);

    $chunks = array_chunk($lines, $size);
    $cols = str_split($lines[0], $size);

    $totalParts = count($chunks) * count($cols);

    foreach (range(1, $totalParts) as $part) {
        $rows = array_splice($lines, 0, $size);

        $part = '';

        foreach ($rows as $i => $row) {
            $part .= substr($row, 0, $size) . '/';
            $rows[$i] = substr($row, $size);

            if (empty($rows[$i])) {
                unset($rows[$i]);
            }
        }

        if (!empty($rows)) {
            $rows = array_reverse($rows);
            foreach ($rows as $row) {
                array_unshift($lines, $row);
            }
        }

        $parts[] = substr($part, 0, -1);
    }

    foreach ($parts as $i => $part) {
        $parts[$i] = parse($part);
    }

    return $parts;
}

function merge(array $in) {
    $total = count($in);

    $out = [];

    $width = sqrt(count($in));

    $multiplier = 0;

    foreach ($in as $num => $part) {
        foreach ($part as $i => $line) {
            if (!isset($out[$i + $multiplier])) {
                $out[$i + $multiplier] = [];
            }
            $out[$i + $multiplier] = array_merge($out[$i + $multiplier], $line);
        }

        if (($num + 1) % $width === 0) {
            $multiplier = $multiplier + $width + 1;
        }
    }

    return $out;
}

$grid = parse($pattern);

foreach (explode("\n", $input) as $rule) {
    [$left, $right] = explode(' => ', $rule);

    $rules[$left] = $right;
}

for ($i = 0; $i < 18; $i++) {
    print 'on iteration ' . $i . PHP_EOL;
    $size = count($grid);

    if ($size % 2 === 0)  {
        $parts = divide($grid, 2);
    } elseif ($size % 3 === 0) {
        $parts = divide($grid, 3);
    } else {
        $parts = [];
    }

    foreach ($parts as $j => $part) {
        $rotates = 0;
        $flips = 0;
        do {
            if (isset($rules[flatten($part)])) {
                $parts[$j] = parse($rules[flatten($part)]);
                break;
            }
            if ($rotates <= 3) {
                $part = rotate($part);
                $rotates++;
            } else {
                $part = flip($part);
                $rotates = 0;
                $flips++;
            }
        } while (true);
    }

    if (count($parts) === 1) {
        $grid = $parts[0];
    } else {
        $grid = merge($parts);
    }
}

$result = pretty(flatten($grid)) . PHP_EOL;

// 35 is #
print count_chars($result, 1)[35] . PHP_EOL;
